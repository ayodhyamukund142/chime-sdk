import { __assign, __awaiter, __generator, __read } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, parseEpochTimestamp as __parseEpochTimestamp, } from "@aws-sdk/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ChimeSDKMessagingServiceException as __BaseException } from "../models/ChimeSDKMessagingServiceException";
import { BadRequestException, ConflictException, ForbiddenException, NotFoundException, ResourceLimitExceededException, ServiceFailureException, ServiceUnavailableException, ThrottledClientException, UnauthorizedClientException, } from "../models/models_0";
export var serializeAws_restJson1AssociateChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/channel-flow";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign({}, (input.ChannelFlowArn != null && { ChannelFlowArn: input.ChannelFlowArn })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1BatchCreateChannelMembershipCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/memberships";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = {
                    operation: "batch-create",
                };
                body = JSON.stringify(__assign(__assign({}, (input.MemberArns != null && { MemberArns: serializeAws_restJson1MemberArns(input.MemberArns, context) })), (input.Type != null && { Type: input.Type })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ChannelFlowCallbackCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _d.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = {
                    operation: "channel-flow-callback",
                };
                body = JSON.stringify(__assign(__assign({ CallbackId: (_c = input.CallbackId) !== null && _c !== void 0 ? _c : generateIdempotencyToken() }, (input.ChannelMessage != null && {
                    ChannelMessage: serializeAws_restJson1ChannelMessageCallback(input.ChannelMessage, context),
                })), (input.DeleteResource != null && { DeleteResource: input.DeleteResource })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _d.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.AppInstanceArn != null && { AppInstanceArn: input.AppInstanceArn })), (input.ChannelId != null && { ChannelId: input.ChannelId })), { ClientRequestToken: (_c = input.ClientRequestToken) !== null && _c !== void 0 ? _c : generateIdempotencyToken() }), (input.MemberArns != null && { MemberArns: serializeAws_restJson1ChannelMemberArns(input.MemberArns, context) })), (input.Metadata != null && { Metadata: input.Metadata })), (input.Mode != null && { Mode: input.Mode })), (input.ModeratorArns != null && {
                    ModeratorArns: serializeAws_restJson1ChannelModeratorArns(input.ModeratorArns, context),
                })), (input.Name != null && { Name: input.Name })), (input.Privacy != null && { Privacy: input.Privacy })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateChannelBanCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/bans";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign({}, (input.MemberArn != null && { MemberArn: input.MemberArn })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channel-flows";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.AppInstanceArn != null && { AppInstanceArn: input.AppInstanceArn })), (input.ClientRequestToken != null && { ClientRequestToken: input.ClientRequestToken })), (input.Name != null && { Name: input.Name })), (input.Processors != null && { Processors: serializeAws_restJson1ProcessorList(input.Processors, context) })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateChannelMembershipCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/memberships";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign(__assign({}, (input.MemberArn != null && { MemberArn: input.MemberArn })), (input.Type != null && { Type: input.Type })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CreateChannelModeratorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/moderators";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign({}, (input.ChannelModeratorArn != null && { ChannelModeratorArn: input.ChannelModeratorArn })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelBanCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/bans/{MemberArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channel-flows/{ChannelFlowArn}";
                if (input.ChannelFlowArn !== undefined) {
                    labelValue = input.ChannelFlowArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelFlowArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelFlowArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelFlowArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelMembershipCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/memberships/{MemberArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/messages/{MessageId}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MessageId !== undefined) {
                    labelValue = input.MessageId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MessageId.");
                    }
                    resolvedPath = resolvedPath.replace("{MessageId}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MessageId.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DeleteChannelModeratorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/moderators/{ChannelModeratorArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.ChannelModeratorArn !== undefined) {
                    labelValue = input.ChannelModeratorArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelModeratorArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelModeratorArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelModeratorArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelBanCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/bans/{MemberArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channel-flows/{ChannelFlowArn}";
                if (input.ChannelFlowArn !== undefined) {
                    labelValue = input.ChannelFlowArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelFlowArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelFlowArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelFlowArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelMembershipCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/memberships/{MemberArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelMembershipForAppInstanceUserCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign({ scope: "app-instance-user-membership" }, (input.AppInstanceUserArn !== undefined && { "app-instance-user-arn": input.AppInstanceUserArn }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelModeratedByAppInstanceUserCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign({ scope: "app-instance-user-moderated-channel" }, (input.AppInstanceUserArn !== undefined && { "app-instance-user-arn": input.AppInstanceUserArn }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DescribeChannelModeratorCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/moderators/{ChannelModeratorArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.ChannelModeratorArn !== undefined) {
                    labelValue = input.ChannelModeratorArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelModeratorArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelModeratorArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelModeratorArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1DisassociateChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/channel-flow/{ChannelFlowArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.ChannelFlowArn !== undefined) {
                    labelValue = input.ChannelFlowArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelFlowArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelFlowArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelFlowArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetChannelMembershipPreferencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/memberships/{MemberArn}/preferences";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetChannelMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/messages/{MessageId}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MessageId !== undefined) {
                    labelValue = input.MessageId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MessageId.");
                    }
                    resolvedPath = resolvedPath.replace("{MessageId}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MessageId.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetChannelMessageStatusCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/messages/{MessageId}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MessageId !== undefined) {
                    labelValue = input.MessageId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MessageId.");
                    }
                    resolvedPath = resolvedPath.replace("{MessageId}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MessageId.");
                }
                query = {
                    scope: "message-status",
                };
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1GetMessagingSessionEndpointCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/endpoints/messaging-session";
                body = "";
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelBansCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/bans";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign(__assign({}, (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelFlowsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channel-flows";
                query = __assign(__assign(__assign({}, (input.AppInstanceArn !== undefined && { "app-instance-arn": input.AppInstanceArn })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelMembershipsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/memberships";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign(__assign(__assign({}, (input.Type !== undefined && { type: input.Type })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelMembershipsForAppInstanceUserCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                query = __assign(__assign(__assign({ scope: "app-instance-user-memberships" }, (input.AppInstanceUserArn !== undefined && { "app-instance-user-arn": input.AppInstanceUserArn })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelMessagesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/messages";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign(__assign(__assign(__assign(__assign({}, (input.SortOrder !== undefined && { "sort-order": input.SortOrder })), (input.NotBefore !== undefined && {
                    "not-before": (input.NotBefore.toISOString().split(".")[0] + "Z").toString(),
                })), (input.NotAfter !== undefined && { "not-after": (input.NotAfter.toISOString().split(".")[0] + "Z").toString() })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelModeratorsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/moderators";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                query = __assign(__assign({}, (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                query = __assign(__assign(__assign(__assign({}, (input.AppInstanceArn !== undefined && { "app-instance-arn": input.AppInstanceArn })), (input.Privacy !== undefined && { privacy: input.Privacy })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelsAssociatedWithChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                query = __assign(__assign(__assign({ scope: "channel-flow-associations" }, (input.ChannelFlowArn !== undefined && { "channel-flow-arn": input.ChannelFlowArn })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListChannelsModeratedByAppInstanceUserCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                query = __assign(__assign(__assign({ scope: "app-instance-user-moderated-channels" }, (input.AppInstanceUserArn !== undefined && { "app-instance-user-arn": input.AppInstanceUserArn })), (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ListTagsForResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {};
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags";
                query = __assign({}, (input.ResourceARN !== undefined && { arn: input.ResourceARN }));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1PutChannelMembershipPreferencesCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/memberships/{MemberArn}/preferences";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MemberArn !== undefined) {
                    labelValue = input.MemberArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MemberArn.");
                    }
                    resolvedPath = resolvedPath.replace("{MemberArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MemberArn.");
                }
                body = JSON.stringify(__assign({}, (input.Preferences != null && {
                    Preferences: serializeAws_restJson1ChannelMembershipPreferences(input.Preferences, context),
                })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1RedactChannelMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/messages/{MessageId}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MessageId !== undefined) {
                    labelValue = input.MessageId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MessageId.");
                    }
                    resolvedPath = resolvedPath.replace("{MessageId}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MessageId.");
                }
                query = {
                    operation: "redact",
                };
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SearchChannelsCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels";
                query = __assign(__assign({ operation: "search" }, (input.MaxResults !== undefined && { "max-results": input.MaxResults.toString() })), (input.NextToken !== undefined && { "next-token": input.NextToken }));
                body = JSON.stringify(__assign({}, (input.Fields != null && { Fields: serializeAws_restJson1SearchFields(input.Fields, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1SendChannelMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _d.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/messages";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign({ ClientRequestToken: (_c = input.ClientRequestToken) !== null && _c !== void 0 ? _c : generateIdempotencyToken() }, (input.Content != null && { Content: input.Content })), (input.MessageAttributes != null && {
                    MessageAttributes: serializeAws_restJson1MessageAttributeMap(input.MessageAttributes, context),
                })), (input.Metadata != null && { Metadata: input.Metadata })), (input.Persistence != null && { Persistence: input.Persistence })), (input.PushNotification != null && {
                    PushNotification: serializeAws_restJson1PushNotificationConfiguration(input.PushNotification, context),
                })), (input.Type != null && { Type: input.Type })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1TagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags";
                query = {
                    operation: "tag-resource",
                };
                body = JSON.stringify(__assign(__assign({}, (input.ResourceARN != null && { ResourceARN: input.ResourceARN })), (input.Tags != null && { Tags: serializeAws_restJson1TagList(input.Tags, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UntagResourceCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, query, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/tags";
                query = {
                    operation: "untag-resource",
                };
                body = JSON.stringify(__assign(__assign({}, (input.ResourceARN != null && { ResourceARN: input.ResourceARN })), (input.TagKeys != null && { TagKeys: serializeAws_restJson1TagKeyList(input.TagKeys, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateChannelCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                body = JSON.stringify(__assign(__assign(__assign({}, (input.Metadata != null && { Metadata: input.Metadata })), (input.Mode != null && { Mode: input.Mode })), (input.Name != null && { Name: input.Name })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateChannelFlowCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channel-flows/{ChannelFlowArn}";
                if (input.ChannelFlowArn !== undefined) {
                    labelValue = input.ChannelFlowArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelFlowArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelFlowArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelFlowArn.");
                }
                body = JSON.stringify(__assign(__assign({}, (input.Name != null && { Name: input.Name })), (input.Processors != null && { Processors: serializeAws_restJson1ProcessorList(input.Processors, context) })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateChannelMessageCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({ "content-type": "application/json" }, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") +
                    "/channels/{ChannelArn}/messages/{MessageId}";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                if (input.MessageId !== undefined) {
                    labelValue = input.MessageId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: MessageId.");
                    }
                    resolvedPath = resolvedPath.replace("{MessageId}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: MessageId.");
                }
                body = JSON.stringify(__assign(__assign({}, (input.Content != null && { Content: input.Content })), (input.Metadata != null && { Metadata: input.Metadata })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1UpdateChannelReadMarkerCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, labelValue, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = __assign({}, (isSerializableHeaderValue(input.ChimeBearer) && { "x-amz-chime-bearer": input.ChimeBearer }));
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/channels/{ChannelArn}/readMarker";
                if (input.ChannelArn !== undefined) {
                    labelValue = input.ChannelArn;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: ChannelArn.");
                    }
                    resolvedPath = resolvedPath.replace("{ChannelArn}", __extendedEncodeURIComponent(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: ChannelArn.");
                }
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "PUT",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var deserializeAws_restJson1AssociateChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1AssociateChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1AssociateChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1BatchCreateChannelMembershipCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1BatchCreateChannelMembershipCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    BatchChannelMemberships: undefined,
                    Errors: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.BatchChannelMemberships !== undefined && data.BatchChannelMemberships !== null) {
                    contents.BatchChannelMemberships = deserializeAws_restJson1BatchChannelMemberships(data.BatchChannelMemberships, context);
                }
                if (data.Errors !== undefined && data.Errors !== null) {
                    contents.Errors = deserializeAws_restJson1BatchCreateChannelMembershipErrors(data.Errors, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1BatchCreateChannelMembershipCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ChannelFlowCallbackCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ChannelFlowCallbackCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    CallbackId: undefined,
                    ChannelArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.CallbackId !== undefined && data.CallbackId !== null) {
                    contents.CallbackId = __expectString(data.CallbackId);
                }
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ChannelFlowCallbackCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1CreateChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateChannelCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1CreateChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ResourceLimitExceededException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1CreateChannelBanCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateChannelBanCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    Member: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.Member !== undefined && data.Member !== null) {
                    contents.Member = deserializeAws_restJson1Identity(data.Member, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1CreateChannelBanCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ResourceLimitExceededException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1CreateChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelFlowArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelFlowArn !== undefined && data.ChannelFlowArn !== null) {
                    contents.ChannelFlowArn = __expectString(data.ChannelFlowArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1CreateChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ResourceLimitExceededException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1CreateChannelMembershipCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateChannelMembershipCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    Member: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.Member !== undefined && data.Member !== null) {
                    contents.Member = deserializeAws_restJson1Identity(data.Member, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1CreateChannelMembershipCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ResourceLimitExceededException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1CreateChannelModeratorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CreateChannelModeratorCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    ChannelModerator: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.ChannelModerator !== undefined && data.ChannelModerator !== null) {
                    contents.ChannelModerator = deserializeAws_restJson1Identity(data.ChannelModerator, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1CreateChannelModeratorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ResourceLimitExceededException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelBanCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelBanCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelBanCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelMembershipCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelMembershipCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelMembershipCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelMessageCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DeleteChannelModeratorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DeleteChannelModeratorCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteChannelModeratorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channel: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channel !== undefined && data.Channel !== null) {
                    contents.Channel = deserializeAws_restJson1Channel(data.Channel, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelBanCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelBanCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelBan: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelBan !== undefined && data.ChannelBan !== null) {
                    contents.ChannelBan = deserializeAws_restJson1ChannelBan(data.ChannelBan, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelBanCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelFlow: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelFlow !== undefined && data.ChannelFlow !== null) {
                    contents.ChannelFlow = deserializeAws_restJson1ChannelFlow(data.ChannelFlow, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelMembershipCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelMembershipCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelMembership: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelMembership !== undefined && data.ChannelMembership !== null) {
                    contents.ChannelMembership = deserializeAws_restJson1ChannelMembership(data.ChannelMembership, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelMembershipCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelMembershipForAppInstanceUserCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelMembershipForAppInstanceUserCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelMembership: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelMembership !== undefined && data.ChannelMembership !== null) {
                    contents.ChannelMembership = deserializeAws_restJson1ChannelMembershipForAppInstanceUserSummary(data.ChannelMembership, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelMembershipForAppInstanceUserCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelModeratedByAppInstanceUserCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelModeratedByAppInstanceUserCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channel: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channel !== undefined && data.Channel !== null) {
                    contents.Channel = deserializeAws_restJson1ChannelModeratedByAppInstanceUserSummary(data.Channel, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelModeratedByAppInstanceUserCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DescribeChannelModeratorCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DescribeChannelModeratorCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelModerator: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelModerator !== undefined && data.ChannelModerator !== null) {
                    contents.ChannelModerator = deserializeAws_restJson1ChannelModerator(data.ChannelModerator, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DescribeChannelModeratorCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1DisassociateChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1DisassociateChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DisassociateChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "NotFoundException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 8];
                    case "ServiceFailureException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 10];
                    case "ServiceUnavailableException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 12];
                    case "ThrottledClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 14];
                    case "UnauthorizedClientException": return [3, 16];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 16];
                }
                return [3, 18];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 17: throw _d.sent();
            case 18:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1GetChannelMembershipPreferencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetChannelMembershipPreferencesCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    Member: undefined,
                    Preferences: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.Member !== undefined && data.Member !== null) {
                    contents.Member = deserializeAws_restJson1Identity(data.Member, context);
                }
                if (data.Preferences !== undefined && data.Preferences !== null) {
                    contents.Preferences = deserializeAws_restJson1ChannelMembershipPreferences(data.Preferences, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1GetChannelMembershipPreferencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1GetChannelMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetChannelMessageCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelMessage: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelMessage !== undefined && data.ChannelMessage !== null) {
                    contents.ChannelMessage = deserializeAws_restJson1ChannelMessage(data.ChannelMessage, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1GetChannelMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "NotFoundException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#NotFoundException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1GetChannelMessageStatusCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetChannelMessageStatusCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Status: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Status !== undefined && data.Status !== null) {
                    contents.Status = deserializeAws_restJson1ChannelMessageStatusStructure(data.Status, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1GetChannelMessageStatusCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1GetMessagingSessionEndpointCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1GetMessagingSessionEndpointCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Endpoint: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Endpoint !== undefined && data.Endpoint !== null) {
                    contents.Endpoint = deserializeAws_restJson1MessagingSessionEndpoint(data.Endpoint, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1GetMessagingSessionEndpointCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "ForbiddenException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 2];
                    case "ServiceFailureException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 4];
                    case "ServiceUnavailableException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 6];
                    case "ThrottledClientException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 8];
                    case "UnauthorizedClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelBansCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelBansCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    ChannelBans: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.ChannelBans !== undefined && data.ChannelBans !== null) {
                    contents.ChannelBans = deserializeAws_restJson1ChannelBanSummaryList(data.ChannelBans, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelBansCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelFlowsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelFlowsCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelFlows: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelFlows !== undefined && data.ChannelFlows !== null) {
                    contents.ChannelFlows = deserializeAws_restJson1ChannelFlowSummaryList(data.ChannelFlows, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelFlowsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelMembershipsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelMembershipsCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    ChannelMemberships: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.ChannelMemberships !== undefined && data.ChannelMemberships !== null) {
                    contents.ChannelMemberships = deserializeAws_restJson1ChannelMembershipSummaryList(data.ChannelMemberships, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelMembershipsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelMembershipsForAppInstanceUserCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelMembershipsForAppInstanceUserCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelMemberships: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelMemberships !== undefined && data.ChannelMemberships !== null) {
                    contents.ChannelMemberships = deserializeAws_restJson1ChannelMembershipForAppInstanceUserSummaryList(data.ChannelMemberships, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelMembershipsForAppInstanceUserCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelMessagesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelMessagesCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    ChannelMessages: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.ChannelMessages !== undefined && data.ChannelMessages !== null) {
                    contents.ChannelMessages = deserializeAws_restJson1ChannelMessageSummaryList(data.ChannelMessages, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelMessagesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelModeratorsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelModeratorsCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    ChannelModerators: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.ChannelModerators !== undefined && data.ChannelModerators !== null) {
                    contents.ChannelModerators = deserializeAws_restJson1ChannelModeratorSummaryList(data.ChannelModerators, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelModeratorsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelsCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channels: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channels !== undefined && data.Channels !== null) {
                    contents.Channels = deserializeAws_restJson1ChannelSummaryList(data.Channels, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelsAssociatedWithChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelsAssociatedWithChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channels: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channels !== undefined && data.Channels !== null) {
                    contents.Channels = deserializeAws_restJson1ChannelAssociatedWithFlowSummaryList(data.Channels, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelsAssociatedWithChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListChannelsModeratedByAppInstanceUserCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListChannelsModeratedByAppInstanceUserCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channels: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channels !== undefined && data.Channels !== null) {
                    contents.Channels = deserializeAws_restJson1ChannelModeratedByAppInstanceUserSummaryList(data.Channels, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListChannelsModeratedByAppInstanceUserCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1ListTagsForResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ListTagsForResourceCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Tags: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Tags !== undefined && data.Tags !== null) {
                    contents.Tags = deserializeAws_restJson1TagList(data.Tags, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1ListTagsForResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1PutChannelMembershipPreferencesCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1PutChannelMembershipPreferencesCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    Member: undefined,
                    Preferences: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.Member !== undefined && data.Member !== null) {
                    contents.Member = deserializeAws_restJson1Identity(data.Member, context);
                }
                if (data.Preferences !== undefined && data.Preferences !== null) {
                    contents.Preferences = deserializeAws_restJson1ChannelMembershipPreferences(data.Preferences, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1PutChannelMembershipPreferencesCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1RedactChannelMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1RedactChannelMessageCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    MessageId: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.MessageId !== undefined && data.MessageId !== null) {
                    contents.MessageId = __expectString(data.MessageId);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1RedactChannelMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1SearchChannelsCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SearchChannelsCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    Channels: undefined,
                    NextToken: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.Channels !== undefined && data.Channels !== null) {
                    contents.Channels = deserializeAws_restJson1ChannelSummaryList(data.Channels, context);
                }
                if (data.NextToken !== undefined && data.NextToken !== null) {
                    contents.NextToken = __expectString(data.NextToken);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1SearchChannelsCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1SendChannelMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 201 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1SendChannelMessageCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    MessageId: undefined,
                    Status: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.MessageId !== undefined && data.MessageId !== null) {
                    contents.MessageId = __expectString(data.MessageId);
                }
                if (data.Status !== undefined && data.Status !== null) {
                    contents.Status = deserializeAws_restJson1ChannelMessageStatusStructure(data.Status, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1SendChannelMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1TagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1TagResourceCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1TagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ResourceLimitExceededException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ResourceLimitExceededException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ResourceLimitExceededExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1UntagResourceCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 204 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UntagResourceCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                };
                return [4, collectBody(output.body, context)];
            case 1:
                _a.sent();
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1UntagResourceCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ForbiddenException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 4];
                    case "ServiceFailureException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 6];
                    case "ServiceUnavailableException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 8];
                    case "ThrottledClientException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 10];
                    case "UnauthorizedClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1UpdateChannelCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateChannelCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1UpdateChannelCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1UpdateChannelFlowCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateChannelFlowCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelFlowArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelFlowArn !== undefined && data.ChannelFlowArn !== null) {
                    contents.ChannelFlowArn = __expectString(data.ChannelFlowArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1UpdateChannelFlowCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1UpdateChannelMessageCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateChannelMessageCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                    MessageId: undefined,
                    Status: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                if (data.MessageId !== undefined && data.MessageId !== null) {
                    contents.MessageId = __expectString(data.MessageId);
                }
                if (data.Status !== undefined && data.Status !== null) {
                    contents.Status = deserializeAws_restJson1ChannelMessageStatusStructure(data.Status, context);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1UpdateChannelMessageCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
export var deserializeAws_restJson1UpdateChannelReadMarkerCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1UpdateChannelReadMarkerCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    ChannelArn: undefined,
                };
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.ChannelArn !== undefined && data.ChannelArn !== null) {
                    contents.ChannelArn = __expectString(data.ChannelArn);
                }
                return [2, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1UpdateChannelReadMarkerCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, parsedBody, $metadata, statusCode;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3, 2];
                    case "com.amazonaws.chimesdkmessaging#BadRequestException": return [3, 2];
                    case "ConflictException": return [3, 4];
                    case "com.amazonaws.chimesdkmessaging#ConflictException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.chimesdkmessaging#ForbiddenException": return [3, 6];
                    case "ServiceFailureException": return [3, 8];
                    case "com.amazonaws.chimesdkmessaging#ServiceFailureException": return [3, 8];
                    case "ServiceUnavailableException": return [3, 10];
                    case "com.amazonaws.chimesdkmessaging#ServiceUnavailableException": return [3, 10];
                    case "ThrottledClientException": return [3, 12];
                    case "com.amazonaws.chimesdkmessaging#ThrottledClientException": return [3, 12];
                    case "UnauthorizedClientException": return [3, 14];
                    case "com.amazonaws.chimesdkmessaging#UnauthorizedClientException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ThrottledClientExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                $metadata = deserializeMetadata(output);
                statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
                response = new __BaseException({
                    name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknowError",
                    $fault: "client",
                    $metadata: $metadata,
                });
                throw __decorateServiceException(response, parsedBody);
        }
    });
}); };
var deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new BadRequestException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ConflictException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ForbiddenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ForbiddenException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new NotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ResourceLimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ResourceLimitExceededException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ServiceFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ServiceFailureException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ServiceUnavailableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ServiceUnavailableException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ThrottledClientExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new ThrottledClientException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1UnauthorizedClientExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = {};
        data = parsedOutput.body;
        if (data.Code !== undefined && data.Code !== null) {
            contents.Code = __expectString(data.Code);
        }
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = __expectString(data.Message);
        }
        exception = new UnauthorizedClientException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var serializeAws_restJson1ChannelMemberArns = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1ChannelMembershipPreferences = function (input, context) {
    return __assign({}, (input.PushNotifications != null && {
        PushNotifications: serializeAws_restJson1PushNotificationPreferences(input.PushNotifications, context),
    }));
};
var serializeAws_restJson1ChannelMessageCallback = function (input, context) {
    return __assign(__assign(__assign(__assign(__assign({}, (input.Content != null && { Content: input.Content })), (input.MessageAttributes != null && {
        MessageAttributes: serializeAws_restJson1MessageAttributeMap(input.MessageAttributes, context),
    })), (input.MessageId != null && { MessageId: input.MessageId })), (input.Metadata != null && { Metadata: input.Metadata })), (input.PushNotification != null && {
        PushNotification: serializeAws_restJson1PushNotificationConfiguration(input.PushNotification, context),
    }));
};
var serializeAws_restJson1ChannelModeratorArns = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1LambdaConfiguration = function (input, context) {
    return __assign(__assign({}, (input.InvocationType != null && { InvocationType: input.InvocationType })), (input.ResourceArn != null && { ResourceArn: input.ResourceArn }));
};
var serializeAws_restJson1MemberArns = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1MessageAttributeMap = function (input, context) {
    return Object.entries(input).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = serializeAws_restJson1MessageAttributeValue(value, context), _b));
    }, {});
};
var serializeAws_restJson1MessageAttributeStringValues = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1MessageAttributeValue = function (input, context) {
    return __assign({}, (input.StringValues != null && {
        StringValues: serializeAws_restJson1MessageAttributeStringValues(input.StringValues, context),
    }));
};
var serializeAws_restJson1Processor = function (input, context) {
    return __assign(__assign(__assign(__assign({}, (input.Configuration != null && {
        Configuration: serializeAws_restJson1ProcessorConfiguration(input.Configuration, context),
    })), (input.ExecutionOrder != null && { ExecutionOrder: input.ExecutionOrder })), (input.FallbackAction != null && { FallbackAction: input.FallbackAction })), (input.Name != null && { Name: input.Name }));
};
var serializeAws_restJson1ProcessorConfiguration = function (input, context) {
    return __assign({}, (input.Lambda != null && { Lambda: serializeAws_restJson1LambdaConfiguration(input.Lambda, context) }));
};
var serializeAws_restJson1ProcessorList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_restJson1Processor(entry, context);
    });
};
var serializeAws_restJson1PushNotificationConfiguration = function (input, context) {
    return __assign(__assign(__assign({}, (input.Body != null && { Body: input.Body })), (input.Title != null && { Title: input.Title })), (input.Type != null && { Type: input.Type }));
};
var serializeAws_restJson1PushNotificationPreferences = function (input, context) {
    return __assign(__assign({}, (input.AllowNotifications != null && { AllowNotifications: input.AllowNotifications })), (input.FilterRule != null && { FilterRule: input.FilterRule }));
};
var serializeAws_restJson1SearchField = function (input, context) {
    return __assign(__assign(__assign({}, (input.Key != null && { Key: input.Key })), (input.Operator != null && { Operator: input.Operator })), (input.Values != null && { Values: serializeAws_restJson1SearchFieldValues(input.Values, context) }));
};
var serializeAws_restJson1SearchFields = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_restJson1SearchField(entry, context);
    });
};
var serializeAws_restJson1SearchFieldValues = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1Tag = function (input, context) {
    return __assign(__assign({}, (input.Key != null && { Key: input.Key })), (input.Value != null && { Value: input.Value }));
};
var serializeAws_restJson1TagKeyList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
var serializeAws_restJson1TagList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return serializeAws_restJson1Tag(entry, context);
    });
};
var deserializeAws_restJson1AppInstanceUserMembershipSummary = function (output, context) {
    return {
        ReadMarkerTimestamp: output.ReadMarkerTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.ReadMarkerTimestamp)))
            : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_restJson1BatchChannelMemberships = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        InvitedBy: output.InvitedBy != null ? deserializeAws_restJson1Identity(output.InvitedBy, context) : undefined,
        Members: output.Members != null ? deserializeAws_restJson1Members(output.Members, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_restJson1BatchCreateChannelMembershipError = function (output, context) {
    return {
        ErrorCode: __expectString(output.ErrorCode),
        ErrorMessage: __expectString(output.ErrorMessage),
        MemberArn: __expectString(output.MemberArn),
    };
};
var deserializeAws_restJson1BatchCreateChannelMembershipErrors = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BatchCreateChannelMembershipError(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Channel = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        ChannelFlowArn: __expectString(output.ChannelFlowArn),
        CreatedBy: output.CreatedBy != null ? deserializeAws_restJson1Identity(output.CreatedBy, context) : undefined,
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        LastMessageTimestamp: output.LastMessageTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastMessageTimestamp)))
            : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        Metadata: __expectString(output.Metadata),
        Mode: __expectString(output.Mode),
        Name: __expectString(output.Name),
        Privacy: __expectString(output.Privacy),
    };
};
var deserializeAws_restJson1ChannelAssociatedWithFlowSummary = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        Metadata: __expectString(output.Metadata),
        Mode: __expectString(output.Mode),
        Name: __expectString(output.Name),
        Privacy: __expectString(output.Privacy),
    };
};
var deserializeAws_restJson1ChannelAssociatedWithFlowSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelAssociatedWithFlowSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelBan = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        CreatedBy: output.CreatedBy != null ? deserializeAws_restJson1Identity(output.CreatedBy, context) : undefined,
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        Member: output.Member != null ? deserializeAws_restJson1Identity(output.Member, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelBanSummary = function (output, context) {
    return {
        Member: output.Member != null ? deserializeAws_restJson1Identity(output.Member, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelBanSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelBanSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelFlow = function (output, context) {
    return {
        ChannelFlowArn: __expectString(output.ChannelFlowArn),
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        Name: __expectString(output.Name),
        Processors: output.Processors != null ? deserializeAws_restJson1ProcessorList(output.Processors, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelFlowSummary = function (output, context) {
    return {
        ChannelFlowArn: __expectString(output.ChannelFlowArn),
        Name: __expectString(output.Name),
        Processors: output.Processors != null ? deserializeAws_restJson1ProcessorList(output.Processors, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelFlowSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelFlowSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelMembership = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        InvitedBy: output.InvitedBy != null ? deserializeAws_restJson1Identity(output.InvitedBy, context) : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        Member: output.Member != null ? deserializeAws_restJson1Identity(output.Member, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_restJson1ChannelMembershipForAppInstanceUserSummary = function (output, context) {
    return {
        AppInstanceUserMembershipSummary: output.AppInstanceUserMembershipSummary != null
            ? deserializeAws_restJson1AppInstanceUserMembershipSummary(output.AppInstanceUserMembershipSummary, context)
            : undefined,
        ChannelSummary: output.ChannelSummary != null
            ? deserializeAws_restJson1ChannelSummary(output.ChannelSummary, context)
            : undefined,
    };
};
var deserializeAws_restJson1ChannelMembershipForAppInstanceUserSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelMembershipForAppInstanceUserSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelMembershipPreferences = function (output, context) {
    return {
        PushNotifications: output.PushNotifications != null
            ? deserializeAws_restJson1PushNotificationPreferences(output.PushNotifications, context)
            : undefined,
    };
};
var deserializeAws_restJson1ChannelMembershipSummary = function (output, context) {
    return {
        Member: output.Member != null ? deserializeAws_restJson1Identity(output.Member, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelMembershipSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelMembershipSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelMessage = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        Content: __expectString(output.Content),
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        LastEditedTimestamp: output.LastEditedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastEditedTimestamp)))
            : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        MessageAttributes: output.MessageAttributes != null
            ? deserializeAws_restJson1MessageAttributeMap(output.MessageAttributes, context)
            : undefined,
        MessageId: __expectString(output.MessageId),
        Metadata: __expectString(output.Metadata),
        Persistence: __expectString(output.Persistence),
        Redacted: __expectBoolean(output.Redacted),
        Sender: output.Sender != null ? deserializeAws_restJson1Identity(output.Sender, context) : undefined,
        Status: output.Status != null ? deserializeAws_restJson1ChannelMessageStatusStructure(output.Status, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_restJson1ChannelMessageStatusStructure = function (output, context) {
    return {
        Detail: __expectString(output.Detail),
        Value: __expectString(output.Value),
    };
};
var deserializeAws_restJson1ChannelMessageSummary = function (output, context) {
    return {
        Content: __expectString(output.Content),
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        LastEditedTimestamp: output.LastEditedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastEditedTimestamp)))
            : undefined,
        LastUpdatedTimestamp: output.LastUpdatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTimestamp)))
            : undefined,
        MessageAttributes: output.MessageAttributes != null
            ? deserializeAws_restJson1MessageAttributeMap(output.MessageAttributes, context)
            : undefined,
        MessageId: __expectString(output.MessageId),
        Metadata: __expectString(output.Metadata),
        Redacted: __expectBoolean(output.Redacted),
        Sender: output.Sender != null ? deserializeAws_restJson1Identity(output.Sender, context) : undefined,
        Status: output.Status != null ? deserializeAws_restJson1ChannelMessageStatusStructure(output.Status, context) : undefined,
        Type: __expectString(output.Type),
    };
};
var deserializeAws_restJson1ChannelMessageSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelMessageSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelModeratedByAppInstanceUserSummary = function (output, context) {
    return {
        ChannelSummary: output.ChannelSummary != null
            ? deserializeAws_restJson1ChannelSummary(output.ChannelSummary, context)
            : undefined,
    };
};
var deserializeAws_restJson1ChannelModeratedByAppInstanceUserSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelModeratedByAppInstanceUserSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelModerator = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        CreatedBy: output.CreatedBy != null ? deserializeAws_restJson1Identity(output.CreatedBy, context) : undefined,
        CreatedTimestamp: output.CreatedTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTimestamp)))
            : undefined,
        Moderator: output.Moderator != null ? deserializeAws_restJson1Identity(output.Moderator, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelModeratorSummary = function (output, context) {
    return {
        Moderator: output.Moderator != null ? deserializeAws_restJson1Identity(output.Moderator, context) : undefined,
    };
};
var deserializeAws_restJson1ChannelModeratorSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelModeratorSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ChannelSummary = function (output, context) {
    return {
        ChannelArn: __expectString(output.ChannelArn),
        LastMessageTimestamp: output.LastMessageTimestamp != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastMessageTimestamp)))
            : undefined,
        Metadata: __expectString(output.Metadata),
        Mode: __expectString(output.Mode),
        Name: __expectString(output.Name),
        Privacy: __expectString(output.Privacy),
    };
};
var deserializeAws_restJson1ChannelSummaryList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ChannelSummary(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Identity = function (output, context) {
    return {
        Arn: __expectString(output.Arn),
        Name: __expectString(output.Name),
    };
};
var deserializeAws_restJson1LambdaConfiguration = function (output, context) {
    return {
        InvocationType: __expectString(output.InvocationType),
        ResourceArn: __expectString(output.ResourceArn),
    };
};
var deserializeAws_restJson1Members = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Identity(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1MessageAttributeMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = __read(_a, 2), key = _c[0], value = _c[1];
        if (value === null) {
            return acc;
        }
        return __assign(__assign({}, acc), (_b = {}, _b[key] = deserializeAws_restJson1MessageAttributeValue(value, context), _b));
    }, {});
};
var deserializeAws_restJson1MessageAttributeStringValues = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1MessageAttributeValue = function (output, context) {
    return {
        StringValues: output.StringValues != null
            ? deserializeAws_restJson1MessageAttributeStringValues(output.StringValues, context)
            : undefined,
    };
};
var deserializeAws_restJson1MessagingSessionEndpoint = function (output, context) {
    return {
        Url: __expectString(output.Url),
    };
};
var deserializeAws_restJson1Processor = function (output, context) {
    return {
        Configuration: output.Configuration != null
            ? deserializeAws_restJson1ProcessorConfiguration(output.Configuration, context)
            : undefined,
        ExecutionOrder: __expectInt32(output.ExecutionOrder),
        FallbackAction: __expectString(output.FallbackAction),
        Name: __expectString(output.Name),
    };
};
var deserializeAws_restJson1ProcessorConfiguration = function (output, context) {
    return {
        Lambda: output.Lambda != null ? deserializeAws_restJson1LambdaConfiguration(output.Lambda, context) : undefined,
    };
};
var deserializeAws_restJson1ProcessorList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Processor(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1PushNotificationPreferences = function (output, context) {
    return {
        AllowNotifications: __expectString(output.AllowNotifications),
        FilterRule: __expectString(output.FilterRule),
    };
};
var deserializeAws_restJson1Tag = function (output, context) {
    return {
        Key: __expectString(output.Key),
        Value: __expectString(output.Value),
    };
};
var deserializeAws_restJson1TagList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Tag(entry, context);
    });
    return retVal;
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== null &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
