import { __extends } from "tslib";
import { ChimeSDKMessagingClient } from "./ChimeSDKMessagingClient";
import { AssociateChannelFlowCommand, } from "./commands/AssociateChannelFlowCommand";
import { BatchCreateChannelMembershipCommand, } from "./commands/BatchCreateChannelMembershipCommand";
import { ChannelFlowCallbackCommand, } from "./commands/ChannelFlowCallbackCommand";
import { CreateChannelBanCommand, } from "./commands/CreateChannelBanCommand";
import { CreateChannelCommand, } from "./commands/CreateChannelCommand";
import { CreateChannelFlowCommand, } from "./commands/CreateChannelFlowCommand";
import { CreateChannelMembershipCommand, } from "./commands/CreateChannelMembershipCommand";
import { CreateChannelModeratorCommand, } from "./commands/CreateChannelModeratorCommand";
import { DeleteChannelBanCommand, } from "./commands/DeleteChannelBanCommand";
import { DeleteChannelCommand, } from "./commands/DeleteChannelCommand";
import { DeleteChannelFlowCommand, } from "./commands/DeleteChannelFlowCommand";
import { DeleteChannelMembershipCommand, } from "./commands/DeleteChannelMembershipCommand";
import { DeleteChannelMessageCommand, } from "./commands/DeleteChannelMessageCommand";
import { DeleteChannelModeratorCommand, } from "./commands/DeleteChannelModeratorCommand";
import { DescribeChannelBanCommand, } from "./commands/DescribeChannelBanCommand";
import { DescribeChannelCommand, } from "./commands/DescribeChannelCommand";
import { DescribeChannelFlowCommand, } from "./commands/DescribeChannelFlowCommand";
import { DescribeChannelMembershipCommand, } from "./commands/DescribeChannelMembershipCommand";
import { DescribeChannelMembershipForAppInstanceUserCommand, } from "./commands/DescribeChannelMembershipForAppInstanceUserCommand";
import { DescribeChannelModeratedByAppInstanceUserCommand, } from "./commands/DescribeChannelModeratedByAppInstanceUserCommand";
import { DescribeChannelModeratorCommand, } from "./commands/DescribeChannelModeratorCommand";
import { DisassociateChannelFlowCommand, } from "./commands/DisassociateChannelFlowCommand";
import { GetChannelMembershipPreferencesCommand, } from "./commands/GetChannelMembershipPreferencesCommand";
import { GetChannelMessageCommand, } from "./commands/GetChannelMessageCommand";
import { GetChannelMessageStatusCommand, } from "./commands/GetChannelMessageStatusCommand";
import { GetMessagingSessionEndpointCommand, } from "./commands/GetMessagingSessionEndpointCommand";
import { ListChannelBansCommand, } from "./commands/ListChannelBansCommand";
import { ListChannelFlowsCommand, } from "./commands/ListChannelFlowsCommand";
import { ListChannelMembershipsCommand, } from "./commands/ListChannelMembershipsCommand";
import { ListChannelMembershipsForAppInstanceUserCommand, } from "./commands/ListChannelMembershipsForAppInstanceUserCommand";
import { ListChannelMessagesCommand, } from "./commands/ListChannelMessagesCommand";
import { ListChannelModeratorsCommand, } from "./commands/ListChannelModeratorsCommand";
import { ListChannelsAssociatedWithChannelFlowCommand, } from "./commands/ListChannelsAssociatedWithChannelFlowCommand";
import { ListChannelsCommand, } from "./commands/ListChannelsCommand";
import { ListChannelsModeratedByAppInstanceUserCommand, } from "./commands/ListChannelsModeratedByAppInstanceUserCommand";
import { ListTagsForResourceCommand, } from "./commands/ListTagsForResourceCommand";
import { PutChannelMembershipPreferencesCommand, } from "./commands/PutChannelMembershipPreferencesCommand";
import { RedactChannelMessageCommand, } from "./commands/RedactChannelMessageCommand";
import { SearchChannelsCommand, } from "./commands/SearchChannelsCommand";
import { SendChannelMessageCommand, } from "./commands/SendChannelMessageCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { UpdateChannelCommand, } from "./commands/UpdateChannelCommand";
import { UpdateChannelFlowCommand, } from "./commands/UpdateChannelFlowCommand";
import { UpdateChannelMessageCommand, } from "./commands/UpdateChannelMessageCommand";
import { UpdateChannelReadMarkerCommand, } from "./commands/UpdateChannelReadMarkerCommand";
var ChimeSDKMessaging = (function (_super) {
    __extends(ChimeSDKMessaging, _super);
    function ChimeSDKMessaging() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChimeSDKMessaging.prototype.associateChannelFlow = function (args, optionsOrCb, cb) {
        var command = new AssociateChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.batchCreateChannelMembership = function (args, optionsOrCb, cb) {
        var command = new BatchCreateChannelMembershipCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.channelFlowCallback = function (args, optionsOrCb, cb) {
        var command = new ChannelFlowCallbackCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.createChannel = function (args, optionsOrCb, cb) {
        var command = new CreateChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.createChannelBan = function (args, optionsOrCb, cb) {
        var command = new CreateChannelBanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.createChannelFlow = function (args, optionsOrCb, cb) {
        var command = new CreateChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.createChannelMembership = function (args, optionsOrCb, cb) {
        var command = new CreateChannelMembershipCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.createChannelModerator = function (args, optionsOrCb, cb) {
        var command = new CreateChannelModeratorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannel = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannelBan = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelBanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannelFlow = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannelMembership = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelMembershipCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannelMessage = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelMessageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.deleteChannelModerator = function (args, optionsOrCb, cb) {
        var command = new DeleteChannelModeratorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannel = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelBan = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelBanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelFlow = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelMembership = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelMembershipCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelMembershipForAppInstanceUser = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelMembershipForAppInstanceUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelModeratedByAppInstanceUser = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelModeratedByAppInstanceUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.describeChannelModerator = function (args, optionsOrCb, cb) {
        var command = new DescribeChannelModeratorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.disassociateChannelFlow = function (args, optionsOrCb, cb) {
        var command = new DisassociateChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.getChannelMembershipPreferences = function (args, optionsOrCb, cb) {
        var command = new GetChannelMembershipPreferencesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.getChannelMessage = function (args, optionsOrCb, cb) {
        var command = new GetChannelMessageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.getChannelMessageStatus = function (args, optionsOrCb, cb) {
        var command = new GetChannelMessageStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.getMessagingSessionEndpoint = function (args, optionsOrCb, cb) {
        var command = new GetMessagingSessionEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelBans = function (args, optionsOrCb, cb) {
        var command = new ListChannelBansCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelFlows = function (args, optionsOrCb, cb) {
        var command = new ListChannelFlowsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelMemberships = function (args, optionsOrCb, cb) {
        var command = new ListChannelMembershipsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelMembershipsForAppInstanceUser = function (args, optionsOrCb, cb) {
        var command = new ListChannelMembershipsForAppInstanceUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelMessages = function (args, optionsOrCb, cb) {
        var command = new ListChannelMessagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelModerators = function (args, optionsOrCb, cb) {
        var command = new ListChannelModeratorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannels = function (args, optionsOrCb, cb) {
        var command = new ListChannelsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelsAssociatedWithChannelFlow = function (args, optionsOrCb, cb) {
        var command = new ListChannelsAssociatedWithChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listChannelsModeratedByAppInstanceUser = function (args, optionsOrCb, cb) {
        var command = new ListChannelsModeratedByAppInstanceUserCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.listTagsForResource = function (args, optionsOrCb, cb) {
        var command = new ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.putChannelMembershipPreferences = function (args, optionsOrCb, cb) {
        var command = new PutChannelMembershipPreferencesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.redactChannelMessage = function (args, optionsOrCb, cb) {
        var command = new RedactChannelMessageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.searchChannels = function (args, optionsOrCb, cb) {
        var command = new SearchChannelsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.sendChannelMessage = function (args, optionsOrCb, cb) {
        var command = new SendChannelMessageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.tagResource = function (args, optionsOrCb, cb) {
        var command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.untagResource = function (args, optionsOrCb, cb) {
        var command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.updateChannel = function (args, optionsOrCb, cb) {
        var command = new UpdateChannelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.updateChannelFlow = function (args, optionsOrCb, cb) {
        var command = new UpdateChannelFlowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.updateChannelMessage = function (args, optionsOrCb, cb) {
        var command = new UpdateChannelMessageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    ChimeSDKMessaging.prototype.updateChannelReadMarker = function (args, optionsOrCb, cb) {
        var command = new UpdateChannelReadMarkerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return ChimeSDKMessaging;
}(ChimeSDKMessagingClient));
export { ChimeSDKMessaging };
