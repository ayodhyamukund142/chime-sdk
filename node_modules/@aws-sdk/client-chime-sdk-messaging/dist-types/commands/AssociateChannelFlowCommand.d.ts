import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ChimeSDKMessagingClient";
import { AssociateChannelFlowRequest } from "../models/models_0";
export interface AssociateChannelFlowCommandInput extends AssociateChannelFlowRequest {
}
export interface AssociateChannelFlowCommandOutput extends __MetadataBearer {
}
/**
 * <p>Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the
 *          <code>DisassociateChannelFlow</code> API.</p>
 *
 *          <note>
 *             <p>Only administrators or channel moderators can associate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code>
 *          of the user that makes the API call as the value in the header.</p>
 *          </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ChimeSDKMessagingClient, AssociateChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
 * // const { ChimeSDKMessagingClient, AssociateChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
 * const client = new ChimeSDKMessagingClient(config);
 * const command = new AssociateChannelFlowCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link AssociateChannelFlowCommandInput} for command's `input` shape.
 * @see {@link AssociateChannelFlowCommandOutput} for command's `response` shape.
 * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
 *
 */
export declare class AssociateChannelFlowCommand extends $Command<AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
    readonly input: AssociateChannelFlowCommandInput;
    constructor(input: AssociateChannelFlowCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput>;
    private serialize;
    private deserialize;
}
